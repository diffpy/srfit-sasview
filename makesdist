#!/usr/bin/env python

'''Create source distribution tar.gz archive, where each file belongs
to a root user and modification time is set to the git commit time.
Remove Python files that get generated by setup.py.
'''

import sys
import os
import tempfile
import subprocess
import glob
import tarfile
import gzip
import shutil

BASEDIR = os.path.dirname(os.path.realpath(__file__))

def inform(msg):
    sys.stdout.write(msg.rstrip() + ' ')
    sys.stdout.flush()

inform("Create pristine temporary git clone")
TMPCLONEDIR = tempfile.mkdtemp()
cmd_clone = ['git', 'clone', '-s', '-q', BASEDIR, TMPCLONEDIR]
ec = subprocess.call(cmd_clone, cwd=BASEDIR)
if ec:  sys.exit(ec)
print "[done]"

# determine the release timestamp
proc = subprocess.Popen(['git', 'log', '-1', '--format=%at'],
                        stdout=subprocess.PIPE, cwd=BASEDIR)
glog = proc.stdout.read()
timestamp = float(glog)

inform('Run "setup.py sdist --formats=tar"')
cmd_sdist = [sys.executable] + 'setup.py sdist --formats=tar'.split()
ec = subprocess.call(cmd_sdist, cwd=TMPCLONEDIR,
                     stdout=open(os.devnull, 'w'))
if ec:  sys.exit(ec)
print "[done]"

tarinput = max(glob.glob(TMPCLONEDIR + '/dist/*.tar'),
               key=os.path.getmtime)

outdir = os.path.join(BASEDIR, 'dist')
if not os.path.isdir(outdir):
    os.mkdir(outdir)
taroutput = os.path.join(outdir, os.path.basename(tarinput) + '.gz')

tfin = tarfile.open(tarinput)
fpout = gzip.GzipFile(taroutput, 'w', mtime=0)
tfout = tarfile.open(fileobj=fpout, mode='w')


def fixtarinfo(tinfo):
    tinfo.uid = tinfo.gid = 0
    tinfo.uname = tinfo.gname = 'root'
    tinfo.mtime = timestamp
    tinfo.mode &= ~0o022
    return tinfo


def isgenerated(tfin, ti):
    marker = "THIS FILE WAS GENERATED BY WRAPPERGENERATOR.PY"
    rv = (ti.isfile() and ti.name.lower().endswith('.py') and
          marker in tfin.extractfile(ti).read())
    return rv


inform('Filter %s --> dist/%s' % (tarinput, os.path.basename(taroutput)))
for ti in tfin:
    if isgenerated(tfin, ti):
        continue
    tfout.addfile(fixtarinfo(ti), tfin.extractfile(ti))
tfin.close()
print "[done]"

inform("Remove temporary git clone")
shutil.rmtree(TMPCLONEDIR)
print "[done]"
